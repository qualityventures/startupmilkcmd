{"_from":"git://github.com/ferggren/babel-plugin-css-modules-transform.git","_id":"babel-plugin-css-modules-transform@1.2.8","_inBundle":false,"_integrity":"sha512-MFKLZXx+c2Gt+95C6aE4X5jrwiMjQkcwDpDrJJ1UNAt70+WtkJsryo/l0wjS/G7pW5sLRZd/ThQ+BrmGdU4FmQ==","_location":"/babel-plugin-css-modules-transform","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"babel-plugin-css-modules-transform@^1.2.8","name":"babel-plugin-css-modules-transform","escapedName":"babel-plugin-css-modules-transform","rawSpec":"^1.2.8","saveSpec":null,"fetchSpec":"^1.2.8"},"_requiredBy":["/"],"_resolved":"git://github.com/ferggren/babel-plugin-css-modules-transform.git#34a80c7c66979b5385b035a909ec6507365123da","_shasum":"54a4d0c24ef7bbc8868058380fe5d5f59eab5b10","_spec":"babel-plugin-css-modules-transform@^1.2.8","_where":"/Users/ferg/work/web/react-realty","author":{"name":"Michal Kvasničák","email":"michal.kvasnicak@gmail.com","url":"http://kvasnicak.info"},"bugs":{"url":"https://github.com/michalkvasnicak/babel-plugin-css-modules-transform/issues"},"bundleDependencies":false,"dependencies":{"css-modules-require-hook":"^4.0.6","mkdirp":"^0.5.1"},"deprecated":false,"description":"Transform required css modules so one can use generated class names.","devDependencies":{"babel-cli":"^6.22.2","babel-core":"^6.22.1","babel-eslint":"^7.1.1","babel-plugin-istanbul":"^4.1.3","babel-plugin-transform-es2015-block-scoping":"^6.22.0","babel-plugin-transform-es2015-destructuring":"^6.22.0","babel-plugin-transform-es2015-modules-commonjs":"^6.22.0","babel-plugin-transform-es2015-parameters":"^6.22.0","babel-plugin-transform-es2015-spread":"^6.22.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.22.0","babel-plugin-transform-strict-mode":"^6.22.0","babel-preset-es2015":"^6.22.0","chai":"^3.4.1","cross-env":"^5.0.0","eslint":"^1.9.0","eslint-config-airbnb-lite":"^1.0.0","gulp-babel":"^6.1.2","gulp-util":"^3.0.7","mocha":"^3.4.2","nyc":"^10.3.2","postcss":"^5.x","postcss-modules-extract-imports":"^1.x","postcss-modules-local-by-default":"^1.x","postcss-modules-scope":"^1.x","postcss-modules-values":"^1.x","rimraf":"^2.5.4"},"engines":{"node":">=4.0.0"},"homepage":"https://github.com/michalkvasnicak/babel-plugin-css-modules-transform#readme","keywords":["babel","css-modules","babel-plugin","plugin"],"license":"MIT","main":"build/index.js","name":"babel-plugin-css-modules-transform","repository":{"type":"git","url":"git+https://github.com/michalkvasnicak/babel-plugin-css-modules-transform.git"},"scripts":{"build":"babel src --ignore **/*.spec.js -d build","lint":"eslint src","pretest":"npm run lint","test":"cross-env NODE_ENV=test nyc mocha"},"version":"1.2.8","gitHead":"34a80c7c66979b5385b035a909ec6507365123da","readme":"# babel-plugin-css-modules-transform [Babel 6 only]\n\n[![Circle CI](https://circleci.com/gh/michalkvasnicak/babel-plugin-css-modules-transform.svg?style=svg)](https://circleci.com/gh/michalkvasnicak/babel-plugin-css-modules-transform)\n\nThis Babel plugin finds all `require`s for css module files and replace them with a hash where keys are class names and values are generated css class names.\n\nThis plugin is based on the fantastic [css-modules-require-hook](https://github.com/css-modules/css-modules-require-hook).\n\n## Warning\n\nThis plugin is experimental, pull requests are welcome.\n\n**Do not run this plugin as part of webpack frontend configuration. This plugin is intended only for backend compilation.**\n\n## Example\n\n```css\n/* test.css */\n\n.someClass {\n    color: red;\n}\n```\n\n```js\n// component.js\nconst styles = require('./test.css');\n\nconsole.log(styles.someClass);\n\n// transformed file\nconst styles = {\n    'someClass': 'Test__someClass___2Frqu'\n}\n\nconsole.log(styles.someClass); // prints Test__someClass___2Frqu\n```\n\n## Installation\n\n```\nnpm install --save-dev babel-plugin-css-modules-transform\n```\n\n**Include plugin in `.babelrc`**\n\n```json\n{\n    \"plugins\": [\"css-modules-transform\"]\n}\n```\n\n**With custom options [css-modules-require-hook options](https://github.com/css-modules/css-modules-require-hook#tuning-options)**\n\n\n```js\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"append\": [\n                    \"npm-module-name\",\n                    \"./path/to/module-exporting-a-function.js\"\n                ],\n                \"camelCase\": false,\n                \"createImportedName\": \"npm-module-name\",\n                \"createImportedName\": \"./path/to/module-exporting-a-function.js\",\n                \"devMode\": false,\n                \"extensions\": [\".css\", \".scss\", \".less\"], // list extensions to process; defaults to .css\n                \"generateScopedName\": \"[name]__[local]___[hash:base64:5]\", // in case you don't want to use a function\n                \"generateScopedName\": \"./path/to/module-exporting-a-function.js\", // in case you want to use a function\n                \"generateScopedName\": \"npm-module-name\",\n                \"hashPrefix\": \"string\",\n                \"ignore\": \"*css\",\n                \"ignore\": \"./path/to/module-exporting-a-function-or-regexp.js\",\n                \"preprocessCss\": \"./path/to/module-exporting-a-function.js\",\n                \"preprocessCss\": \"npm-module-name\",\n                \"processCss\": \"./path/to/module-exporting-a-function.js\",\n                \"processCss\": \"npm-module-name\",\n                \"processorOpts\": \"npm-module-name\",\n                \"processorOpts\": \"./path/to/module/exporting-a-plain-object.js\",\n                \"mode\": \"string\",\n                \"prepend\": [\n                    \"npm-module-name\",\n                    \"./path/to/module-exporting-a-function.js\"\n                ],\n                \"extractCss\": \"./dist/stylesheets/combined.css\"\n            }\n        ]\n    ]\n}\n```\n\n## Using a preprocessor\n\nWhen using this plugin with a preprocessor, you'll need to configure it as such:\n\n\n```\n// ./path/to/module-exporting-a-function.js\nvar sass = require('node-sass');\nvar path = require('path');\n\nmodule.exports = function processSass(data, filename) {\n    var result;\n    result = sass.renderSync({\n        data: data,\n        file: filename\n    }).css;\n    return result.toString('utf8');\n};\n```\n\nand then add any relevant extensions to your plugin config:\n\n```\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"preprocessCss\": \"./path/to/module-exporting-a-function.js\",\n                \"extensions\": [\".css\", \".scss\"]\n            }\n        ]\n    ]\n}\n\n```\n\n## Extract CSS Files\n\nWhen you publish a library, you might want to ship compiled css files as well to\nhelp integration in other projects.\n\nAn more complete alternative is to use\n[babel-plugin-webpack-loaders](https://github.com/istarkov/babel-plugin-webpack-loaders)\nbut be aware that a new webpack instance is run for each css file, this has a\nhuge overhead. If you do not use fancy stuff, you might consider using\n[babel-plugin-css-modules-transform](https://github.com/michalkvasnicak/babel-plugin-css-modules-transform)\ninstead.\n\n\nTo combine all css files in a single file, give its name:\n\n```\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"extractCss\": \"./dist/stylesheets/combined.css\"\n            }\n        ]\n    ]\n}\n```\n\nTo extract all files in a single directory, give an object:\n\n```\n{\n    \"plugins\": [\n        [\n            \"css-modules-transform\", {\n                \"extractCss\": {\n                    \"dir\": \"./dist/stylesheets/\",\n                    \"relativeRoot\": \"./src/\",\n                    \"filename\": \"[path]/[name].css\"\n                }\n            }\n        ]\n    ]\n}\n```\n\nNote that `relativeRoot` is used to resolve relative directory names, available\nas `[path]` in `filename` pattern.\n\n## Alternatives\n\n- [babel-plugin-transform-postcss](https://github.com/wbyoung/babel-plugin-transform-postcss) - which supports async plugins and does not depend on `css-modules-require-hook`.\n\n## License\n\nMIT\n","readmeFilename":"README.md"}